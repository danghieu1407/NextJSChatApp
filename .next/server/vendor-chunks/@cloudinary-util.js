"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cloudinary-util";
exports.ids = ["vendor-chunks/@cloudinary-util"];
exports.modules = {

/***/ "(ssr)/./node_modules/@cloudinary-util/url-loader/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@cloudinary-util/url-loader/dist/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  constructCloudinaryUrl: () => constructCloudinaryUrl,\n  effects: () => effects,\n  position: () => position,\n  primary: () => primary,\n  text: () => text,\n  transformationPlugins: () => transformationPlugins\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/lib/cloudinary.ts\nvar import_url_gen = __webpack_require__(/*! @cloudinary/url-gen */ \"(ssr)/./node_modules/@cloudinary/url-gen/index.cjs\");\nvar import_util5 = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.js\");\n\n// src/plugins/cropping.ts\nvar cropping_exports = {};\n__export(cropping_exports, {\n  assetTypes: () => assetTypes,\n  normalizeNumberParameter: () => normalizeNumberParameter,\n  plugin: () => plugin,\n  props: () => props\n});\nvar cropsGravityAuto = [\"crop\", \"fill\", \"lfill\", \"fill_pad\", \"thumb\"];\nvar cropsWithZoom = [\"crop\", \"thumb\"];\nvar props = [\n  \"crop\",\n  \"gravity\",\n  \"zoom\"\n];\nvar assetTypes = [\"image\", \"images\", \"video\", \"videos\"];\nfunction normalizeNumberParameter(param) {\n  if (typeof param !== \"string\")\n    return param;\n  return parseInt(param);\n}\nfunction plugin(props15) {\n  const { cldAsset, options } = props15;\n  const {\n    width: defaultWidth,\n    height: defaultHeight,\n    widthResize: defaultWidthResize,\n    crop = \"limit\"\n  } = options;\n  const overrides = {\n    width: void 0\n  };\n  let height = normalizeNumberParameter(defaultHeight);\n  let width = normalizeNumberParameter(defaultWidth);\n  let widthResize = normalizeNumberParameter(defaultWidthResize);\n  let transformationString = \"\";\n  if (width) {\n    transformationString = `c_${crop},w_${width}`;\n  }\n  if (!options.gravity && cropsGravityAuto.includes(crop)) {\n    options.gravity = \"auto\";\n  }\n  if (![\"limit\"].includes(crop)) {\n    transformationString = `${transformationString},h_${height}`;\n  }\n  if (options.gravity) {\n    if (options.gravity === \"auto\" && !cropsGravityAuto.includes(crop)) {\n      console.warn(`Auto gravity can only be used with crop modes: ${cropsGravityAuto.join(\", \")}. Not applying gravity.`);\n    } else {\n      transformationString = `${transformationString},g_${options.gravity}`;\n    }\n  }\n  if (options.zoom) {\n    if (options.zoom === \"auto\" && !cropsWithZoom.includes(crop)) {\n      console.warn(`Zoom can only be used with crop modes: ${cropsWithZoom.join(\", \")}. Not applying zoom.`);\n    } else {\n      transformationString = `${transformationString},z_${options.zoom}`;\n    }\n  }\n  cldAsset.effect(transformationString);\n  if (width && widthResize && widthResize < width) {\n    overrides.width = widthResize;\n  }\n  return {\n    options: overrides\n  };\n}\n\n// src/plugins/effects.ts\nvar effects_exports = {};\n__export(effects_exports, {\n  assetTypes: () => assetTypes2,\n  plugin: () => plugin2,\n  props: () => props2\n});\n\n// src/constants/qualifiers.ts\nvar import_util = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.js\");\nvar convertersColors = [\n  {\n    test: import_util.testColorIsHex,\n    convert: import_util.convertColorHexToRgb\n  }\n];\nvar primary = {\n  aspectRatio: {\n    qualifier: \"ar\"\n  },\n  crop: {\n    qualifier: \"c\"\n  },\n  gravity: {\n    qualifier: \"g\"\n  },\n  height: {\n    qualifier: \"h\"\n  },\n  width: {\n    qualifier: \"w\"\n  }\n};\nvar position = {\n  angle: {\n    qualifier: \"a\"\n  },\n  gravity: {\n    qualifier: \"g\"\n  },\n  x: {\n    qualifier: \"x\"\n  },\n  y: {\n    qualifier: \"y\"\n  }\n};\nvar text = {\n  alignment: {\n    qualifier: false,\n    order: 6\n  },\n  antialias: {\n    qualifier: \"antialias\"\n  },\n  border: {\n    qualifier: \"bo\",\n    location: \"primary\"\n  },\n  color: {\n    qualifier: \"co\",\n    location: \"primary\",\n    converters: convertersColors\n  },\n  fontFamily: {\n    qualifier: false,\n    order: 1\n  },\n  fontSize: {\n    qualifier: false,\n    order: 2\n  },\n  fontStyle: {\n    qualifier: false,\n    order: 4\n  },\n  fontWeight: {\n    qualifier: false,\n    order: 3\n  },\n  hinting: {\n    qualifier: \"hinting\"\n  },\n  letterSpacing: {\n    qualifier: \"letter_spacing\"\n  },\n  lineSpacing: {\n    qualifier: \"line_spacing\"\n  },\n  stroke: {\n    qualifier: \"self\",\n    order: 7\n  },\n  textDecoration: {\n    qualifier: false,\n    order: 5\n  }\n};\nvar effects = {\n  art: {\n    prefix: \"e\",\n    qualifier: \"art\"\n  },\n  autoBrightness: {\n    prefix: \"e\",\n    qualifier: \"auto_brightness\"\n  },\n  autoColor: {\n    prefix: \"e\",\n    qualifier: \"auto_color\"\n  },\n  autoContrast: {\n    prefix: \"e\",\n    qualifier: \"auto_contrast\"\n  },\n  assistColorblind: {\n    prefix: \"e\",\n    qualifier: \"assist_colorblind\"\n  },\n  background: {\n    qualifier: \"b\"\n  },\n  blackwhite: {\n    prefix: \"e\",\n    qualifier: \"blackwhite\"\n  },\n  blur: {\n    prefix: \"e\",\n    qualifier: \"blur\"\n  },\n  blurFaces: {\n    prefix: \"e\",\n    qualifier: \"blur_faces\"\n  },\n  blurRegion: {\n    prefix: \"e\",\n    qualifier: \"blur_region\"\n  },\n  border: {\n    qualifier: \"bo\"\n  },\n  brightness: {\n    prefix: \"e\",\n    qualifier: \"brightness\"\n  },\n  brightnessHSB: {\n    prefix: \"e\",\n    qualifier: \"brightness_hsb\"\n  },\n  cartoonify: {\n    prefix: \"e\",\n    qualifier: \"cartoonify\"\n  },\n  color: {\n    qualifier: \"co\",\n    converters: convertersColors\n  },\n  colorize: {\n    prefix: \"e\",\n    qualifier: \"colorize\"\n  },\n  contrast: {\n    prefix: \"e\",\n    qualifier: \"contrast\"\n  },\n  distort: {\n    prefix: \"e\",\n    qualifier: \"distort\"\n  },\n  fillLight: {\n    prefix: \"e\",\n    qualifier: \"fill_light\"\n  },\n  gamma: {\n    prefix: \"e\",\n    qualifier: \"gamma\"\n  },\n  gradientFade: {\n    prefix: \"e\",\n    qualifier: \"gradient_fade\"\n  },\n  grayscale: {\n    prefix: \"e\",\n    qualifier: \"grayscale\"\n  },\n  improve: {\n    prefix: \"e\",\n    qualifier: \"improve\"\n  },\n  multiply: {\n    prefix: \"e\",\n    qualifier: \"multiply\"\n  },\n  negate: {\n    prefix: \"e\",\n    qualifier: \"negate\"\n  },\n  oilPaint: {\n    prefix: \"e\",\n    qualifier: \"oil_paint\"\n  },\n  opacity: {\n    qualifier: \"o\"\n  },\n  outline: {\n    prefix: \"e\",\n    qualifier: \"outline\"\n  },\n  overlay: {\n    prefix: \"e\",\n    qualifier: \"overlay\"\n  },\n  pixelate: {\n    prefix: \"e\",\n    qualifier: \"pixelate\"\n  },\n  pixelateFaces: {\n    prefix: \"e\",\n    qualifier: \"pixelate_faces\"\n  },\n  pixelateRegion: {\n    prefix: \"e\",\n    qualifier: \"pixelate_region\"\n  },\n  radius: {\n    qualifier: \"r\"\n  },\n  redeye: {\n    prefix: \"e\",\n    qualifier: \"redeye\"\n  },\n  replaceColor: {\n    prefix: \"e\",\n    qualifier: \"replace_color\"\n  },\n  saturation: {\n    prefix: \"e\",\n    qualifier: \"saturation\"\n  },\n  screen: {\n    prefix: \"e\",\n    qualifier: \"screen\"\n  },\n  sepia: {\n    prefix: \"e\",\n    qualifier: \"sepia\"\n  },\n  shadow: {\n    prefix: \"e\",\n    qualifier: \"shadow\"\n  },\n  sharpen: {\n    prefix: \"e\",\n    qualifier: \"sharpen\"\n  },\n  shear: {\n    prefix: \"e\",\n    qualifier: \"shear\"\n  },\n  simulateColorblind: {\n    prefix: \"e\",\n    qualifier: \"simulate_colorblind\"\n  },\n  tint: {\n    prefix: \"e\",\n    qualifier: \"tint\"\n  },\n  trim: {\n    prefix: \"e\",\n    qualifier: \"trim\"\n  },\n  unsharpMask: {\n    prefix: \"e\",\n    qualifier: \"unsharp_mask\"\n  },\n  vectorize: {\n    prefix: \"e\",\n    qualifier: \"vectorize\"\n  },\n  vibrance: {\n    prefix: \"e\",\n    qualifier: \"vibrance\"\n  },\n  vignette: {\n    prefix: \"e\",\n    qualifier: \"vignette\"\n  }\n};\nvar flags = {\n  animated: {\n    prefix: \"fl\",\n    qualifier: \"animated\"\n  },\n  anyFormat: {\n    prefix: \"fl\",\n    qualifier: \"any_format\"\n  },\n  apng: {\n    prefix: \"fl\",\n    qualifier: \"apng\"\n  },\n  attachment: {\n    prefix: \"fl\",\n    qualifier: \"attachment\"\n  },\n  awebp: {\n    prefix: \"fl\",\n    qualifier: \"awebp\"\n  },\n  clip: {\n    prefix: \"fl\",\n    qualifier: \"clip\"\n  },\n  clipEvenodd: {\n    prefix: \"fl\",\n    qualifier: \"clip_evenodd\"\n  },\n  cutter: {\n    prefix: \"fl\",\n    qualifier: \"cutter\"\n  },\n  draco: {\n    prefix: \"fl\",\n    qualifier: \"draco\"\n  },\n  forceIcc: {\n    prefix: \"fl\",\n    qualifier: \"force_icc\"\n  },\n  forceStrip: {\n    prefix: \"fl\",\n    qualifier: \"force_strip\"\n  },\n  getinfo: {\n    prefix: \"fl\",\n    qualifier: \"getinfo\"\n  },\n  group4: {\n    prefix: \"fl\",\n    qualifier: \"group4\"\n  },\n  hlsv3: {\n    prefix: \"fl\",\n    qualifier: \"hlsv3\"\n  },\n  ignoreAspectRatio: {\n    prefix: \"fl\",\n    qualifier: \"ignore_aspect_ratio\"\n  },\n  ignoreMaskChannels: {\n    prefix: \"fl\",\n    qualifier: \"ignore_mask_channels\"\n  },\n  immutableCache: {\n    prefix: \"fl\",\n    qualifier: \"immutable_cache\"\n  },\n  keepAttribution: {\n    prefix: \"fl\",\n    qualifier: \"keep_attribution\"\n  },\n  keepDar: {\n    prefix: \"fl\",\n    qualifier: \"keep_dar\"\n  },\n  keepIptc: {\n    prefix: \"fl\",\n    qualifier: \"keep_iptc\"\n  },\n  layerApply: {\n    prefix: \"fl\",\n    qualifier: \"layer_apply\"\n  },\n  lossy: {\n    prefix: \"fl\",\n    qualifier: \"lossy\"\n  },\n  mono: {\n    prefix: \"fl\",\n    qualifier: \"mono\"\n  },\n  noOverflow: {\n    prefix: \"fl\",\n    qualifier: \"no_overflow\"\n  },\n  noStream: {\n    prefix: \"fl\",\n    qualifier: \"no_stream\"\n  },\n  png8: {\n    prefix: \"fl\",\n    qualifier: \"png8\"\n  },\n  png24: {\n    prefix: \"fl\",\n    qualifier: \"png24\"\n  },\n  png32: {\n    prefix: \"fl\",\n    qualifier: \"png32\"\n  },\n  preserveTransparency: {\n    prefix: \"fl\",\n    qualifier: \"preserve_transparency\"\n  },\n  progressive: {\n    prefix: \"fl\",\n    qualifier: \"progressive\"\n  },\n  rasterize: {\n    prefix: \"fl\",\n    qualifier: \"rasterize\"\n  },\n  regionRelative: {\n    prefix: \"fl\",\n    qualifier: \"region_relative\"\n  },\n  relative: {\n    prefix: \"fl\",\n    qualifier: \"relative\",\n    location: \"primary\"\n  },\n  replaceImage: {\n    prefix: \"fl\",\n    qualifier: \"replace_image\"\n  },\n  sanitize: {\n    prefix: \"fl\",\n    qualifier: \"sanitize\"\n  },\n  splice: {\n    prefix: \"fl\",\n    qualifier: \"splice\"\n  },\n  streamingAttachment: {\n    prefix: \"fl\",\n    qualifier: \"streaming_attachment\"\n  },\n  stripProfile: {\n    prefix: \"fl\",\n    qualifier: \"strip_profile\"\n  },\n  textDisallowOverflow: {\n    prefix: \"fl\",\n    qualifier: \"text_disallow_overflow\"\n  },\n  textNoTrim: {\n    prefix: \"fl\",\n    qualifier: \"text_no_trim\"\n  },\n  tif8Lzw: {\n    prefix: \"fl\",\n    qualifier: \"tif8_lzw\"\n  },\n  tiled: {\n    prefix: \"fl\",\n    qualifier: \"tiled\"\n  },\n  truncateTs: {\n    prefix: \"fl\",\n    qualifier: \"truncate_ts\"\n  },\n  waveform: {\n    prefix: \"fl\",\n    qualifier: \"waveform\"\n  }\n};\nvar video = {\n  streamingProfile: {\n    qualifier: \"sp\",\n    location: \"primary\"\n  }\n};\n\n// src/lib/transformations.ts\nfunction constructTransformation({ prefix, qualifier, value, converters }) {\n  let transformation = \"\";\n  if (prefix) {\n    transformation = `${prefix}_`;\n  }\n  let transformationValue = value;\n  converters == null ? void 0 : converters.forEach(({ test, convert }) => {\n    if (!test(transformationValue))\n      return;\n    transformationValue = convert(transformationValue);\n  });\n  if (transformationValue === true || transformationValue === \"true\") {\n    return `${transformation}${qualifier}`;\n  }\n  if (typeof transformationValue === \"string\" || typeof transformationValue === \"number\") {\n    if (prefix) {\n      return `${transformation}${qualifier}:${transformationValue}`;\n    } else {\n      return `${qualifier}_${transformationValue}`;\n    }\n  }\n}\n\n// src/plugins/effects.ts\nvar props2 = [...Object.keys(effects), \"effects\"];\nvar assetTypes2 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin2(props15) {\n  const { cldAsset, options } = props15;\n  const transformationStrings = constructTransformationString({\n    effects,\n    options\n  });\n  transformationStrings.filter((t) => !!t).forEach((transformation) => cldAsset.effect(transformation));\n  ;\n  if (Array.isArray(options == null ? void 0 : options.effects)) {\n    options == null ? void 0 : options.effects.forEach((effectsSet) => {\n      const transformationString = constructTransformationString({\n        effects,\n        options: effectsSet\n      }).filter((t) => !!t).join(\",\");\n      cldAsset.effect(transformationString);\n    });\n  }\n  function constructTransformationString({ effects: effects2, options: options2 }) {\n    return Object.keys(effects2).map((key) => {\n      const { prefix, qualifier, converters } = effects2[key];\n      return constructTransformation({\n        qualifier,\n        prefix,\n        value: options2 == null ? void 0 : options2[key],\n        converters\n      });\n    });\n  }\n  return {};\n}\n\n// src/plugins/flags.ts\nvar flags_exports = {};\n__export(flags_exports, {\n  assetTypes: () => assetTypes3,\n  plugin: () => plugin3,\n  props: () => props3\n});\nvar props3 = [\"flags\"];\nvar assetTypes3 = [\"image\", \"images\", \"video\", \"videos\"];\nvar supportedFlags = Object.entries(flags).map(([_, { qualifier }]) => qualifier);\nfunction plugin3(props15) {\n  const { cldAsset, options } = props15;\n  const { flags: flags2 = [] } = options;\n  if (Array.isArray(flags2) && flags2.length > 0) {\n    flags2.forEach((flag) => {\n      if (!supportedFlags.includes(flag))\n        return;\n      cldAsset.addFlag(flag);\n    });\n  } else if (typeof flags2 === \"object\") {\n    Object.entries(flags2).forEach(([qualifier, value]) => {\n      if (!supportedFlags.includes(qualifier))\n        return;\n      cldAsset.addTransformation(`fl_${qualifier}:${value}`);\n    });\n  }\n  return {};\n}\n\n// src/plugins/fill-background.ts\nvar fill_background_exports = {};\n__export(fill_background_exports, {\n  assetTypes: () => assetTypes4,\n  plugin: () => plugin4,\n  props: () => props4\n});\nvar props4 = [\"fillBackground\"];\nvar assetTypes4 = [\"image\", \"images\"];\nvar defaultCrop = \"pad\";\nfunction plugin4(props15) {\n  const { cldAsset, options } = props15;\n  const { fillBackground } = options;\n  if (fillBackground === true) {\n    const properties = [\n      \"b_gen_fill\",\n      `ar_${options.width}:${options.height}`,\n      `w_${options.width}`,\n      `c_${defaultCrop}`\n    ];\n    cldAsset.addTransformation(properties.join(\",\"));\n  } else if (typeof fillBackground === \"object\") {\n    const { crop = defaultCrop, gravity, prompt } = fillBackground;\n    const properties = [\n      `ar_${options.width}:${options.height}`,\n      `w_${options.width}`,\n      `c_${crop}`\n    ];\n    if (typeof prompt === \"string\") {\n      properties.unshift(`b_gen_fill:${prompt}`);\n    } else {\n      properties.unshift(`b_gen_fill`);\n    }\n    if (typeof gravity === \"string\") {\n      properties.push(`g_${gravity}`);\n    }\n    cldAsset.addTransformation(properties.join(\",\"));\n  }\n  return {};\n}\n\n// src/plugins/sanitize.ts\nvar sanitize_exports = {};\n__export(sanitize_exports, {\n  assetTypes: () => assetTypes5,\n  plugin: () => plugin5,\n  props: () => props5\n});\nvar props5 = [\"sanitize\"];\nvar assetTypes5 = [\"image\", \"images\"];\nfunction plugin5(props15) {\n  const { cldAsset, options } = props15;\n  const { sanitize = true } = options;\n  const shouldApplySanitizer = sanitize && (options.format === \"svg\" || cldAsset.publicID.endsWith(\".svg\"));\n  if (shouldApplySanitizer) {\n    cldAsset.effect(\"fl_sanitize\");\n  }\n  return {};\n}\n\n// src/plugins/overlays.ts\nvar overlays_exports = {};\n__export(overlays_exports, {\n  DEFAULT_TEXT_OPTIONS: () => DEFAULT_TEXT_OPTIONS,\n  assetTypes: () => assetTypes6,\n  plugin: () => plugin6,\n  props: () => props6\n});\nvar import_util2 = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.js\");\nvar props6 = [\"text\", \"overlays\"];\nvar assetTypes6 = [\"image\", \"images\", \"video\", \"videos\"];\nvar DEFAULT_TEXT_OPTIONS = {\n  color: \"black\",\n  fontFamily: \"Arial\",\n  fontSize: 200,\n  fontWeight: \"bold\"\n};\nfunction plugin6(props15) {\n  const { cldAsset, options } = props15;\n  const { text: text2, overlays = [] } = options;\n  const type = \"overlay\";\n  const typeQualifier = \"l\";\n  if (Array.isArray(overlays)) {\n    overlays.forEach(applyOverlay);\n  }\n  if (typeof text2 === \"string\") {\n    applyOverlay({\n      text: {\n        ...DEFAULT_TEXT_OPTIONS,\n        text: text2\n      }\n    });\n  } else if (typeof text2 === \"object\") {\n    applyOverlay({\n      text: {\n        ...DEFAULT_TEXT_OPTIONS,\n        ...text2\n      }\n    });\n  }\n  function applyOverlay({ publicId, url, position: position2, text: text3, effects: layerEffects = [], appliedEffects = [], ...options2 }) {\n    var _a;\n    const hasPublicId = typeof publicId === \"string\";\n    const hasUrl = typeof url === \"string\";\n    const hasText = typeof text3 === \"object\" || typeof text3 === \"string\";\n    const hasPosition = typeof position2 === \"object\";\n    if (!hasPublicId && !hasUrl && !hasText) {\n      console.warn(`An ${type} is missing Public ID, URL, or Text`);\n      return;\n    }\n    let layerTransformation;\n    if (hasText) {\n      layerTransformation = `${typeQualifier}_text`;\n    } else if (hasPublicId) {\n      layerTransformation = `${typeQualifier}_${publicId.replace(/\\//g, \":\")}`;\n    } else if (hasUrl) {\n      layerTransformation = `${typeQualifier}_fetch:${(0, import_util2.encodeBase64)(url)}`;\n    }\n    const primary2 = [];\n    const applied = [];\n    Object.keys(options2).forEach((key) => {\n      if (!(0, import_util2.objectHasKey)(primary, key))\n        return;\n      const { qualifier, converters } = primary[key];\n      const transformation = constructTransformation({\n        qualifier,\n        value: options2[key],\n        converters\n      });\n      if (transformation) {\n        primary2.push(transformation);\n      }\n    });\n    layerEffects.forEach((effect) => {\n      Object.keys(effect).forEach((key) => {\n        const { qualifier, prefix, converters } = primary[key] || effects[key] || {};\n        const transformation = constructTransformation({\n          qualifier,\n          prefix,\n          value: effect[key],\n          converters\n        });\n        if (transformation) {\n          primary2.push(transformation);\n        }\n      });\n    });\n    appliedEffects.forEach((effect) => {\n      Object.keys(effect).forEach((key) => {\n        const { qualifier, prefix, converters } = primary[key] || effects[key] || {};\n        const transformation = constructTransformation({\n          qualifier,\n          prefix,\n          value: effect[key],\n          converters\n        });\n        if (transformation) {\n          applied.push(transformation);\n        }\n      });\n    });\n    if (hasText) {\n      if (typeof text3 === \"string\") {\n        text3 = {\n          ...DEFAULT_TEXT_OPTIONS,\n          text: text3\n        };\n      }\n      const textTransformations = [];\n      if (typeof text3 === \"object\") {\n        const textOptions = Object.keys(text3).filter((key) => (0, import_util2.objectHasKey)(text, key)).map((key) => {\n          const value = text3 && (0, import_util2.objectHasKey)(text3, key) && text3[key];\n          return {\n            ...text[key],\n            key,\n            value,\n            order: text[key].order || 99\n          };\n        });\n        const sortedTextOptions = (0, import_util2.sortByKey)(textOptions, \"order\");\n        for (const textOption of sortedTextOptions) {\n          const { key, value, qualifier, location, converters } = textOption;\n          let textValue = value;\n          converters == null ? void 0 : converters.forEach(({ test, convert }) => {\n            if (!test(value))\n              return;\n            textValue = convert(value);\n          });\n          if (location === \"primary\") {\n            primary2.push(`${qualifier}_${textValue}`);\n          } else if (qualifier === \"self\") {\n            textTransformations.push(key);\n          } else if (qualifier) {\n            textTransformations.push(`${qualifier}_${textValue}`);\n          } else {\n            textTransformations.push(textValue);\n          }\n        }\n      }\n      const specialCharacters = {\n        \".\": \"%2E\",\n        \",\": \"%2C\",\n        \"/\": \"%2F\"\n      };\n      let layerText = (text3 == null ? void 0 : text3.text) || \"\";\n      if (typeof layerText === \"string\") {\n        (_a = Object.keys(specialCharacters)) == null ? void 0 : _a.forEach((character) => {\n          layerText = layerText == null ? void 0 : layerText.replace(character, specialCharacters[character]);\n        });\n      }\n      layerTransformation = `${layerTransformation}:${textTransformations.join(\"_\")}:${layerText}`;\n    }\n    if (hasPosition) {\n      Object.keys(position2).forEach((key) => {\n        if (!(0, import_util2.objectHasKey)(position, key))\n          return;\n        const { qualifier, converters } = position[key];\n        const transformation = constructTransformation({\n          qualifier,\n          value: position2[key],\n          converters\n        });\n        if (transformation) {\n          applied.push(transformation);\n        }\n      });\n    }\n    if (primary2.length > 0) {\n      layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n    }\n    layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n    if (applied.length > 0) {\n      layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n    }\n    cldAsset.addTransformation(layerTransformation);\n  }\n  return {};\n}\n\n// src/plugins/named-transformations.ts\nvar named_transformations_exports = {};\n__export(named_transformations_exports, {\n  assetTypes: () => assetTypes7,\n  plugin: () => plugin7,\n  props: () => props7\n});\nvar props7 = [\"transformations\"];\nvar assetTypes7 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin7(props15) {\n  const { cldAsset, options } = props15;\n  let { transformations = [] } = options;\n  if (!Array.isArray(transformations)) {\n    transformations = [transformations];\n  }\n  transformations.forEach((transformation) => {\n    cldAsset.addTransformation(`t_${transformation}`);\n  });\n  return {};\n}\n\n// src/plugins/raw-transformations.ts\nvar raw_transformations_exports = {};\n__export(raw_transformations_exports, {\n  assetTypes: () => assetTypes8,\n  plugin: () => plugin8,\n  props: () => props8\n});\nvar props8 = [\"rawTransformations\"];\nvar assetTypes8 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin8(props15) {\n  const { cldAsset, options } = props15;\n  const { rawTransformations = [] } = options;\n  rawTransformations.forEach((transformation) => {\n    cldAsset.addTransformation(transformation);\n  });\n  return {};\n}\n\n// src/plugins/remove-background.ts\nvar remove_background_exports = {};\n__export(remove_background_exports, {\n  assetTypes: () => assetTypes9,\n  plugin: () => plugin9,\n  props: () => props9\n});\nvar props9 = [\"removeBackground\"];\nvar assetTypes9 = [\"image\", \"images\"];\nfunction plugin9(props15) {\n  const { cldAsset, options } = props15;\n  const { removeBackground = false } = options;\n  if (removeBackground) {\n    cldAsset.effect(\"e_background_removal\");\n  }\n  return {};\n}\n\n// src/plugins/seo.ts\nvar seo_exports = {};\n__export(seo_exports, {\n  assetTypes: () => assetTypes10,\n  plugin: () => plugin10,\n  props: () => props10\n});\nvar props10 = [\"seoSuffix\"];\nvar assetTypes10 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin10(props15) {\n  const { cldAsset, options } = props15;\n  const { seoSuffix } = options;\n  if (typeof seoSuffix === \"string\") {\n    if (options.deliveryType === \"fetch\") {\n      console.warn(\"SEO suffix is not supported with a delivery type of fetch\");\n    } else {\n      cldAsset.setSuffix(seoSuffix);\n    }\n  }\n  return {};\n}\n\n// src/plugins/underlays.ts\nvar underlays_exports = {};\n__export(underlays_exports, {\n  assetTypes: () => assetTypes11,\n  plugin: () => plugin11,\n  props: () => props11\n});\nvar import_util3 = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.js\");\nvar props11 = [\"underlay\", \"underlays\"];\nvar assetTypes11 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin11(props15) {\n  const { cldAsset, options } = props15;\n  const { underlay, underlays = [] } = options;\n  const typeQualifier = \"u\";\n  if (Array.isArray(underlays)) {\n    underlays.forEach(applyUnderlay);\n  }\n  if (typeof underlay === \"string\") {\n    const underlayOptions = {\n      publicId: underlay,\n      crop: \"fill\",\n      width: \"1.0\",\n      height: \"1.0\",\n      flags: [\"relative\"]\n    };\n    applyUnderlay(underlayOptions);\n  }\n  function applyUnderlay({ publicId, type, position: position2, effects: layerEffects = [], flags: flags2 = [], ...options2 }) {\n    const hasPublicId = typeof publicId === \"string\";\n    const hasPosition = typeof position2 === \"object\";\n    if (!hasPublicId) {\n      console.warn(`An ${type} is missing a Public ID`);\n      return;\n    }\n    let layerTransformation = `${typeQualifier}_${publicId.replace(/\\//g, \":\")}`;\n    const primary2 = [];\n    const applied = [];\n    Object.keys(options2).forEach((key) => {\n      if (!(0, import_util3.objectHasKey)(primary, key))\n        return;\n      const { qualifier } = primary[key];\n      primary2.push(`${qualifier}_${options2[key]}`);\n    });\n    layerEffects.forEach((effect) => {\n      Object.keys(effect).forEach((key) => {\n        if (!(0, import_util3.objectHasKey)(primary, key))\n          return;\n        const { qualifier } = primary[key];\n        primary2.push(`${qualifier}_${effect[key]}`);\n      });\n    });\n    if (hasPosition) {\n      Object.keys(position2).forEach((key) => {\n        if (!(0, import_util3.objectHasKey)(position, key))\n          return;\n        const { qualifier } = position[key];\n        applied.push(`${qualifier}_${position2[key]}`);\n      });\n    }\n    flags2.forEach((key) => {\n      if (!(0, import_util3.objectHasKey)(flags, key))\n        return;\n      const { qualifier, prefix } = flags[key];\n      primary2.push(`${prefix}_${qualifier}`);\n    });\n    layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n    layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n    if (applied.length > 0) {\n      layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n    }\n    cldAsset.addTransformation(layerTransformation);\n  }\n  return {};\n}\n\n// src/plugins/version.ts\nvar version_exports = {};\n__export(version_exports, {\n  assetTypes: () => assetTypes12,\n  plugin: () => plugin12,\n  props: () => props12\n});\nvar props12 = [\"version\"];\nvar assetTypes12 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin12(props15) {\n  const { cldAsset, options } = props15;\n  const { version } = options;\n  if (typeof version === \"string\" || typeof version === \"number\") {\n    cldAsset.setVersion(`${version}`.replace(\"v\", \"\"));\n  }\n  return {};\n}\n\n// src/plugins/video.ts\nvar video_exports = {};\n__export(video_exports, {\n  assetTypes: () => assetTypes13,\n  plugin: () => plugin13,\n  props: () => props13\n});\nvar import_util4 = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.js\");\nvar props13 = [...Object.keys(video)];\nvar assetTypes13 = [\"video\", \"videos\"];\nfunction plugin13(props15) {\n  const { cldAsset, options } = props15;\n  Object.keys(options).forEach((key) => {\n    if (!(0, import_util4.objectHasKey)(video, key))\n      return;\n    const { prefix, qualifier, converters } = video[key];\n    const transformation = constructTransformation({\n      prefix,\n      qualifier,\n      value: options[key],\n      converters\n    });\n    cldAsset.addTransformation(transformation);\n  });\n  return {};\n}\n\n// src/plugins/zoompan.ts\nvar zoompan_exports = {};\n__export(zoompan_exports, {\n  assetTypes: () => assetTypes14,\n  plugin: () => plugin14,\n  props: () => props14\n});\nvar props14 = [\"zoompan\"];\nvar assetTypes14 = [\"image\", \"images\"];\nfunction plugin14(props15) {\n  const { cldAsset, options } = props15;\n  const { zoompan = false } = options;\n  const overrides = {\n    format: void 0\n  };\n  if (zoompan === true) {\n    cldAsset.effect(\"e_zoompan\");\n  } else if (typeof zoompan === \"string\") {\n    if (zoompan === \"loop\") {\n      cldAsset.effect(\"e_zoompan\");\n      cldAsset.effect(\"e_loop\");\n    } else {\n      cldAsset.effect(`e_zoompan:${zoompan}`);\n    }\n  } else if (typeof zoompan === \"object\") {\n    let zoompanEffect = \"e_zoompan\";\n    if (typeof zoompan.options === \"string\") {\n      zoompanEffect = `${zoompanEffect}${zoompan.options}`;\n    }\n    cldAsset.effect(zoompanEffect);\n    let loopEffect;\n    if (zoompan.loop === true) {\n      loopEffect = \"e_loop\";\n    } else if (typeof zoompan.loop === \"string\") {\n      loopEffect = `e_loop${zoompan.loop}`;\n    }\n    if (loopEffect) {\n      cldAsset.effect(loopEffect);\n    }\n  }\n  if (zoompan !== false) {\n    overrides.format = \"gif\";\n  }\n  return {\n    options: overrides\n  };\n}\n\n// src/lib/cloudinary.ts\nvar transformationPlugins = [\n  remove_background_exports,\n  raw_transformations_exports,\n  cropping_exports,\n  effects_exports,\n  fill_background_exports,\n  flags_exports,\n  overlays_exports,\n  sanitize_exports,\n  named_transformations_exports,\n  seo_exports,\n  underlays_exports,\n  version_exports,\n  video_exports,\n  zoompan_exports\n];\nfunction constructCloudinaryUrl({ options, config, analytics }) {\n  const cld = new import_url_gen.Cloudinary(config);\n  if (typeof (options == null ? void 0 : options.src) !== \"string\") {\n    throw Error(`Failed to construct Cloudinary URL: Missing source (src) in options`);\n  }\n  if (!(options == null ? void 0 : options.assetType)) {\n    options.assetType = \"image\";\n  }\n  const propsCheck = [];\n  transformationPlugins.forEach(({ props: props15 = [] }) => {\n    props15.forEach((prop) => {\n      if (propsCheck.includes(prop)) {\n        throw new Error(`Option ${prop} already exists!`);\n      }\n      propsCheck.push(prop);\n    });\n  });\n  const parsedOptions = {\n    seoSuffix: void 0,\n    version: void 0\n  };\n  let publicId;\n  if (typeof options.src === \"string\" && /^https?:\\/\\//.test(options.src)) {\n    try {\n      const parts = (0, import_util5.parseUrl)(options.src);\n      publicId = parts == null ? void 0 : parts.publicId;\n      parsedOptions.seoSuffix = parts == null ? void 0 : parts.seoSuffix;\n      parsedOptions.version = parts == null ? void 0 : parts.version;\n    } catch (e) {\n    }\n  }\n  if (!publicId) {\n    publicId = options.src;\n  }\n  Object.keys(parsedOptions).forEach((key) => {\n    if ((0, import_util5.objectHasKey)(options, key))\n      return;\n    options[key] = parsedOptions[key];\n  });\n  let cldAsset = void 0;\n  if ([\"image\", \"images\"].includes(options.assetType)) {\n    cldAsset = cld.image(publicId);\n  } else if ([\"video\", \"videos\"].includes(options.assetType)) {\n    cldAsset = cld.video(publicId);\n  }\n  if (typeof cldAsset === \"undefined\") {\n    throw new Error(\"Invalid asset type.\");\n  }\n  transformationPlugins.forEach(({ plugin: plugin15, assetTypes: assetTypes15, props: props15 }) => {\n    const supportedAssetType = typeof (options == null ? void 0 : options.assetType) !== \"undefined\" && assetTypes15.includes(options == null ? void 0 : options.assetType);\n    if (!supportedAssetType) {\n      const optionsKeys = Object.keys(options);\n      const attemptedUse = props15.map((prop) => optionsKeys.includes(prop)).filter((isUsed) => !!isUsed).length > 0;\n      if (attemptedUse) {\n        console.warn(`One of the following props [${props15.join(\", \")}] was used with an unsupported asset type [${options == null ? void 0 : options.assetType}]`);\n      }\n      return;\n    }\n    const results = plugin15({\n      cldAsset,\n      options\n    });\n    const { options: pluginOptions } = results || { options: void 0 };\n    if ((pluginOptions == null ? void 0 : pluginOptions.format) && options) {\n      options.format = pluginOptions.format;\n    }\n    if ((pluginOptions == null ? void 0 : pluginOptions.width) && options) {\n      options.resize = {\n        width: pluginOptions == null ? void 0 : pluginOptions.width\n      };\n    }\n  });\n  if (options == null ? void 0 : options.resize) {\n    const { width, crop = \"scale\" } = options.resize;\n    cldAsset.effect(`c_${crop},w_${width}`);\n  }\n  cldAsset.setDeliveryType((options == null ? void 0 : options.deliveryType) || \"upload\");\n  if ((options == null ? void 0 : options.format) !== \"default\") {\n    cldAsset.format((options == null ? void 0 : options.format) || \"auto\");\n  }\n  if ((options == null ? void 0 : options.quality) !== \"default\") {\n    cldAsset.quality((options == null ? void 0 : options.quality) || \"auto\");\n  }\n  return cldAsset.toURL({\n    trackedAnalytics: analytics\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/url-loader/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cloudinary-util/util/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cloudinary-util/util/dist/index.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  convertColorHexToRgb: () => convertColorHexToRgb,\n  encodeBase64: () => encodeBase64,\n  getPublicId: () => getPublicId,\n  getTransformations: () => getTransformations,\n  objectHasKey: () => objectHasKey,\n  parseUrl: () => parseUrl,\n  sortByKey: () => sortByKey,\n  testColorIsHex: () => testColorIsHex\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/lib/cloudinary.ts\nvar REGEX_VERSION = /\\/v\\d+\\//;\nvar REGEX_FORMAT = /\\.(ai|avif|gif|png|webp|bmp|bw|djvu|dng|ps|ept|eps|eps3|fbx|flif|gif|glb|gltf|heif|heic|ico|indd|jpg|jpe|jpeg|jp2|wdp|jxr|hdp|obj|pdf|ply|png|psd|arw|cr2|svg|tga|tif|tiff|u3ma|usdz|webp|3g2|3gp|avi|flv|m3u8|ts|m2ts|mts|mov|mkv|mp4|mpeg|mpd|mxf|ogv|webm|wmv)$/i;\nvar REGEX_URL = /https?:\\/\\/(?<host>[^\\/]+)\\/(?<cloudName>[^\\/]+)\\/(?<assetType>image|images|video|videos|raw|files)\\/(?<deliveryType>upload|fetch|private|authenticated|sprite|facebook|twitter|youtube|vimeo)?\\/?(?<signature>s--([a-zA-Z0-9\\_\\-]{8}|[a-zA-Z0-9\\_\\-]{32})--)?\\/?(?<transformations>(?:[^_\\/]+_[^,\\/]+,?\\/?)*\\/)*(?<version>v\\d+|\\w{1,2})\\/(?<publicId>[^\\s]+)$/;\nvar ASSET_TYPES_SEO = [\"images\", \"videos\", \"files\"];\nfunction parseUrl(src) {\n  var _a, _b, _c, _d;\n  if (typeof src !== \"string\") {\n    throw new Error(`Failed to parse URL: Invalid src of type ${typeof src}`);\n  }\n  const hasVersion = REGEX_VERSION.test(src);\n  if (!hasVersion) {\n    throw new Error(`Invalid src: Does not include version (Ex: /v1234/)`);\n  }\n  const [baseUrlWithExtension, queryString] = src.split(\"?\");\n  const formatMatches = baseUrlWithExtension.match(REGEX_FORMAT);\n  let baseUrl = baseUrlWithExtension;\n  let format;\n  if (formatMatches !== null) {\n    format = `${formatMatches[0]}`;\n    baseUrl = baseUrlWithExtension.replace(new RegExp(`${format}$`), \"\");\n  }\n  const results = baseUrl.match(REGEX_URL);\n  const transformations = (_b = (_a = results == null ? void 0 : results.groups) == null ? void 0 : _a.transformations) == null ? void 0 : _b.split(\"/\").filter((t) => !!t);\n  const parts = {\n    ...results == null ? void 0 : results.groups,\n    format,\n    seoSuffix: void 0,\n    transformations: transformations || [],\n    queryParams: {},\n    version: ((_c = results == null ? void 0 : results.groups) == null ? void 0 : _c.version) ? parseInt(results.groups.version.replace(\"v\", \"\")) : void 0\n  };\n  if (queryString) {\n    parts.queryParams = queryString.split(\"&\").reduce((prev, curr) => {\n      const [key, value] = curr.split(\"=\");\n      prev[key] = value;\n      return prev;\n    }, {});\n  }\n  if (parts.assetType && ASSET_TYPES_SEO.includes(parts.assetType)) {\n    const publicIdParts = ((_d = parts.publicId) == null ? void 0 : _d.split(\"/\")) || [];\n    parts.seoSuffix = publicIdParts.pop();\n    parts.publicId = publicIdParts.join(\"/\");\n  }\n  if (parts.publicId) {\n    parts.publicId = decodeURIComponent(parts.publicId);\n  }\n  return parts;\n}\nfunction getPublicId(src) {\n  const { publicId } = parseUrl(src) || {};\n  return publicId;\n}\nfunction getTransformations(src) {\n  const { transformations = [] } = parseUrl(src) || {};\n  return transformations.map((t) => t.split(\",\"));\n}\n\n// src/lib/colors.ts\nfunction testColorIsHex(value) {\n  if (typeof value !== \"string\")\n    return false;\n  return !!value.startsWith(\"#\");\n}\nfunction convertColorHexToRgb(value) {\n  return `rgb:${value.replace(\"#\", \"\")}`;\n}\n\n// src/lib/util.ts\nfunction encodeBase64(value) {\n  if (typeof btoa === \"function\") {\n    return btoa(value);\n  }\n  if (typeof Buffer !== \"undefined\") {\n    return Buffer.from(value).toString(\"base64\");\n  }\n}\nfunction objectHasKey(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction sortByKey(array = [], key, type = \"asc\") {\n  function compare(a, b) {\n    let keyA = a[key];\n    let keyB = b[key];\n    if (typeof keyA === \"string\") {\n      keyA = keyA.toLowerCase();\n    }\n    if (typeof keyB === \"string\") {\n      keyB = keyB.toLowerCase();\n    }\n    if (keyA < keyB) {\n      return -1;\n    }\n    if (keyA > keyB) {\n      return 1;\n    }\n    return 0;\n  }\n  let newArray = [...array];\n  if (typeof key !== \"string\")\n    return newArray;\n  newArray = newArray.sort(compare);\n  if (type === \"desc\") {\n    return newArray.reverse();\n  }\n  return newArray;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/util/dist/index.js\n");

/***/ })

};
;